// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DataManagerSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AdSupport
import AppTrackingTransparency
@_exported import DataManagerSDK
import Foundation
import OSLog
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DMOrderCancel : DataManagerSDK.EventModel {
  @objc public var products: [DataManagerSDK.DMProduct] {
    @objc get
    @objc set
  }
  @objc public var orderId: Swift.String {
    @objc get
    @objc set
  }
  @objc public var memberId: Swift.String {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum DMDefaultParams : Swift.Int {
  case id
  case type
  case dttm
  case triggerCode
  case sessionId
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum DMParams : Swift.Int {
  case birthDay
  case email
  case emailAllowed
  case gender
  case memberId
  case memberName
  case orderId
  case paymentAmount
  case paymentMethod
  case phoneNumber
  case productId
  case productImageUrl
  case productName
  case productPrice
  case productQty
  case products
  case productUrl
  case smsAllowed
  case zipCode
  case address
  case totalPrice
  case totalQuantity
  case eventName
  case pvInName
  case pvOutName
  case deeplink
  case referrer
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DMOrder : DataManagerSDK.EventModel {
  @objc public var products: [DataManagerSDK.DMProduct] {
    @objc get
    @objc set
  }
  @objc public var orderId: Swift.String {
    @objc get
    @objc set
  }
  @objc public var zipCode: Swift.String {
    @objc get
    @objc set
  }
  @objc public var phoneNumber: Swift.String {
    @objc get
    @objc set
  }
  @objc public var address: Swift.String {
    @objc get
    @objc set
  }
  @objc public var totalPrice: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var totalQty: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var paymentMethod: Swift.String {
    @objc get
    @objc set
  }
  @objc public var memberName: Swift.String {
    @objc get
    @objc set
  }
  @objc public var email: Swift.String {
    @objc get
    @objc set
  }
  @objc public var memberId: Swift.String {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DMSignOut : DataManagerSDK.EventModel {
  @objc public var memberId: Swift.String {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class DMVisit : DataManagerSDK.EventModel {
  @objc public var deepLink: Swift.String {
    @objc get
    @objc set
  }
  @objc public init(pvInName: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DMFavorite : DataManagerSDK.EventModel {
  @objc public var productId: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productName: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productPrice: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var imageUrl: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productUrl: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productQty: Swift.Int {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.String {
  public static func from(dict: Swift.Dictionary<Swift.String, Any>) -> Swift.String
  public var dictionary: Swift.Dictionary<Swift.String, Any> {
    get
    set
  }
  public func height(withConstrainedWidth width: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
  public func width(withConstrainedHeight height: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
  public func image(width: CoreFoundation.CGFloat = 40, height: CoreFoundation.CGFloat = 40) -> UIKit.UIImage?
  public func toFormattedCurrency() -> Swift.String
  public func isValidPCode() -> Swift.Bool
  public var base64Encoded: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DMOrderOut : DataManagerSDK.EventModel {
  @objc public var products: [DataManagerSDK.DMProduct] {
    @objc get
    @objc set
  }
  @objc public var memberId: Swift.String {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DMCart : DataManagerSDK.EventModel {
  @objc public var productId: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productName: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productPrice: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var productImageUrl: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productUrl: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productQty: Swift.Int {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class DMOut : DataManagerSDK.EventModel {
  @objc public init(pvOutName: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DMProduct : DataManagerSDK.EventModel {
  @objc public var productId: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productName: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productPrice: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var imageUrl: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productUrl: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productQty: Swift.Int {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum DMEventType : Swift.Int {
  case pageView
  case viewedProduct
  case signUp
  case signIn
  case modifyUser
  case signOut
  case cart
  case favorite
  case order
  case orderOut
  case orderCancel
  case install
  case visit
  case out
  case deepLinkOpen
  case custom
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class DataManagerSDK : ObjectiveC.NSObject {
  @objc public static var SDK_VERSION: Swift.String {
    @objc get
  }
  @objc public static var installReferrer: Swift.String?
  @objc public static var enableLog: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public static func initSDK(appKey: Swift.String)
  @objc public static func handleUrl(url: Swift.String)
  @objc public static func addEvent(event: DataManagerSDK.EventModel)
  @objc override dynamic public init()
  @objc deinit
}
extension DataManagerSDK.DataManagerSDK {
  @objc public static func setWebView(webView: WebKit.WKWebView, hostUrl: Swift.String)
  @objc public static func webViewLoadFinished(webView: WebKit.WKWebView, currentUrl: Swift.String)
}
extension Swift.Dictionary {
  public static func from(jsonString: Swift.String) -> Swift.Dictionary<Key, Value>
  public var jsonString: Swift.String {
    get
    set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DMViewedProduct : DataManagerSDK.EventModel {
  @objc public var productId: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productName: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productPrice: Swift.Int {
    @objc get
    @objc set
  }
  @objc public var imageUrl: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productUrl: Swift.String {
    @objc get
    @objc set
  }
  @objc public var productQty: Swift.Int {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class DMInstall : DataManagerSDK.EventModel {
  @objc public init(referrer: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DMSignIn : DataManagerSDK.EventModel {
  @objc public var memberId: Swift.String {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DMModifyUserInfo : DataManagerSDK.EventModel {
  @objc public var memberId: Swift.String {
    @objc get
    @objc set
  }
  @objc public var memberName: Swift.String {
    @objc get
    @objc set
  }
  @objc public var phoneNumber: Swift.String {
    @objc get
    @objc set
  }
  @objc public var email: Swift.String {
    @objc get
    @objc set
  }
  @objc public var smsAllowed: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var emailAllowed: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var birthDay: Swift.String {
    @objc get
    @objc set
  }
  @objc public var gender: Swift.String {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class EventModel : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension DataManagerSDK.EventModel {
  @objc dynamic public func addCustomData(key: Swift.String, value: Any)
  @objc dynamic public func addCustomData(param key: DataManagerSDK.DMParams, value: Any)
  public func toDictionary(parentKey: Swift.String) -> Swift.Dictionary<Swift.String, Any>?
}
@_hasMissingDesignatedInitializers @objc public class DMCustomEvent : DataManagerSDK.EventModel {
  @objc public init(eventName: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DMSignUp : DataManagerSDK.EventModel {
  @objc public var memberId: Swift.String {
    @objc get
    @objc set
  }
  @objc public var memberName: Swift.String {
    @objc get
    @objc set
  }
  @objc public var phoneNumber: Swift.String {
    @objc get
    @objc set
  }
  @objc public var email: Swift.String {
    @objc get
    @objc set
  }
  @objc public var smsAllowed: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var emailAllowed: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var birthday: Swift.String {
    @objc get
    @objc set
  }
  @objc public var gender: Swift.String {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum DMTriggerType : Swift.Int {
  case loadPage
  case click
  public var stringValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class DMDeepLinkOpen : DataManagerSDK.EventModel {
  @objc public init(pvInName: Swift.String, deepLink: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class DMPageView : DataManagerSDK.EventModel {
  @objc public init(pvInName: Swift.String, pvOutName: Swift.String)
  @objc deinit
}
extension DataManagerSDK.DMDefaultParams : Swift.Equatable {}
extension DataManagerSDK.DMDefaultParams : Swift.Hashable {}
extension DataManagerSDK.DMDefaultParams : Swift.RawRepresentable {}
extension DataManagerSDK.DMParams : Swift.Equatable {}
extension DataManagerSDK.DMParams : Swift.Hashable {}
extension DataManagerSDK.DMParams : Swift.RawRepresentable {}
extension DataManagerSDK.DMEventType : Swift.Equatable {}
extension DataManagerSDK.DMEventType : Swift.Hashable {}
extension DataManagerSDK.DMEventType : Swift.RawRepresentable {}
extension DataManagerSDK.DMTriggerType : Swift.Equatable {}
extension DataManagerSDK.DMTriggerType : Swift.Hashable {}
extension DataManagerSDK.DMTriggerType : Swift.RawRepresentable {}
